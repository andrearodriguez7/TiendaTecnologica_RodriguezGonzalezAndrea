/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.tiendatecnologica;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

/**
 *
 * @author Andrea
 */
public class MainWindow extends javax.swing.JFrame {

    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        initComponents();
        if (!Conexion.hayDatos()) {
            Conexion.readJSON("src/main/resources/tienda.json");
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // </editor-fold>
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        usuarios = new javax.swing.JLabel();
        productos = new javax.swing.JLabel();
        historial = new javax.swing.JLabel();
        comprar = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        informacion = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        limpiar = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(204, 204, 204));

        jLabel2.setText("LOGO");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(260, 260, 260))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(jLabel2)
                .addContainerGap(27, Short.MAX_VALUE))
        );

        jPanel2.setBackground(new java.awt.Color(204, 204, 204));

        jLabel1.setText("Tienda Tecnológica");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(219, 219, 219)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jLabel1)
                .addContainerGap(23, Short.MAX_VALUE))
        );

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));

        usuarios.setBackground(new java.awt.Color(204, 204, 204));
        usuarios.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        usuarios.setText("Usuarios");
        usuarios.setOpaque(true);
        usuarios.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                usuariosMouseClicked(evt);
            }
        });

        productos.setBackground(new java.awt.Color(204, 204, 204));
        productos.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        productos.setText("Nuestros Productos");
        productos.setOpaque(true);
        productos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                productosMouseClicked(evt);
            }
        });

        historial.setBackground(new java.awt.Color(204, 204, 204));
        historial.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        historial.setText("Historial");
        historial.setOpaque(true);
        historial.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                historialMouseClicked(evt);
            }
        });

        comprar.setBackground(new java.awt.Color(204, 204, 204));
        comprar.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        comprar.setText("Comprar");
        comprar.setOpaque(true);
        comprar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                comprarMouseClicked(evt);
            }
        });

        informacion.setEditable(false);
        informacion.setBackground(new java.awt.Color(204, 204, 204));
        informacion.setColumns(20);
        informacion.setRows(5);
        jScrollPane1.setViewportView(informacion);

        jLabel3.setBackground(new java.awt.Color(204, 204, 204));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Categorías");
        jLabel3.setOpaque(true);

        limpiar.setBackground(new java.awt.Color(204, 204, 204));
        limpiar.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        limpiar.setText("Limpiar");
        limpiar.setOpaque(true);
        limpiar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                limpiarMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(usuarios, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(productos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(historial, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(comprar, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 292, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(120, 120, 120)
                        .addComponent(limpiar, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(48, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap(35, Short.MAX_VALUE)
                        .addComponent(usuarios, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(productos, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(historial, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(42, 42, 42)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(limpiar, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comprar, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(75, 75, 75))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void usuariosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_usuariosMouseClicked
        mostrarUsuarios();
    }//GEN-LAST:event_usuariosMouseClicked

    private void productosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_productosMouseClicked
        mostrarProductos();
    }//GEN-LAST:event_productosMouseClicked

    private void historialMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_historialMouseClicked
        mostrarHistorial();
    }//GEN-LAST:event_historialMouseClicked

    private void comprarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_comprarMouseClicked
        Compra compra = new Compra();
        compra.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_comprarMouseClicked

    private void limpiarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_limpiarMouseClicked
        informacion.setText("");
    }//GEN-LAST:event_limpiarMouseClicked

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel comprar;
    private javax.swing.JLabel historial;
    private javax.swing.JTextArea informacion;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel limpiar;
    private javax.swing.JLabel productos;
    private javax.swing.JLabel usuarios;
    // End of variables declaration//GEN-END:variables

    private void mostrarUsuarios() {
        try (Connection connection = Conexion.getConnection()) { // Utilizamos tu clase Conexion
            if (connection == null) {
                informacion.setText("Error: No se pudo conectar a la base de datos.");
                return;
            }

            // Consulta SQL para obtener los usuarios
            String query = "SELECT id_usuario, nombre, email, direccion FROM usuarios";

            try (Statement statement = connection.createStatement(); ResultSet resultSet = statement.executeQuery(query)) {
                StringBuilder usuariosInfo = new StringBuilder();

                // Verificar si hay datos en la tabla
                if (!resultSet.isBeforeFirst()) {
                    usuariosInfo.append("No se encontraron usuarios registrados.\n");
                } else {
                    while (resultSet.next()) {
                        // Obtener los datos de cada usuario
                        int idUsuario = resultSet.getInt("id_usuario");
                        String nombre = resultSet.getString("nombre");
                        String email = resultSet.getString("email");
                        String direccion = resultSet.getString("direccion");

                        // Construir la información del usuario
                        usuariosInfo.append("Usuario ID: ").append(idUsuario).append("\n");
                        usuariosInfo.append("Nombre: ").append(nombre).append("\n");
                        usuariosInfo.append("Email: ").append(email).append("\n");
                        usuariosInfo.append("Dirección: ").append(direccion != null ? direccion : "Sin dirección").append("\n");
                        usuariosInfo.append("------------------------------------------------------------\n");
                    }
                }

                // Establecer el texto en el JTextArea
                informacion.setText(usuariosInfo.toString());
            } catch (SQLException e) {
                informacion.setText("Error al realizar la consulta: " + e.getMessage());
                e.printStackTrace();
            }
        } catch (SQLException e) {
            informacion.setText("Error al conectar con la base de datos: " + e.getMessage());
            e.printStackTrace();
        }
    }

    private void mostrarProductos() {
        try (Connection connection = Conexion.getConnection()) { // Usamos tu clase Conexion para la conexión
            if (connection == null) {
                informacion.setText("Error: No se pudo conectar a la base de datos.");
                return;
            }

            // Consulta SQL para obtener los productos
            String query = "SELECT id_producto, nombre, precio, inventario, descripcion FROM productos";

            try (Statement statement = connection.createStatement(); ResultSet resultSet = statement.executeQuery(query)) {
                StringBuilder productosInfo = new StringBuilder();

                // Verificar si no hay productos en la base de datos
                if (!resultSet.isBeforeFirst()) {
                    productosInfo.append("No se encontraron productos registrados.\n");
                } else {
                    while (resultSet.next()) {
                        // Obtener los datos del producto
                        int idProducto = resultSet.getInt("id_producto");
                        String nombre = resultSet.getString("nombre");
                        double precio = resultSet.getDouble("precio");
                        int inventario = resultSet.getInt("inventario");
                        String descripcion = resultSet.getString("descripcion");

                        // Construir la información del producto
                        productosInfo.append("Producto ID: ").append(idProducto).append("\n");
                        productosInfo.append("Nombre: ").append(nombre).append("\n");
                        productosInfo.append("Precio: $").append(String.format("%.2f", precio)).append("\n");
                        productosInfo.append("Inventario: ").append(inventario).append("\n");
                        productosInfo.append("Descripción: ").append(descripcion != null ? descripcion : "Sin descripción").append("\n");
                        productosInfo.append("------------------------------------------------------------\n");
                    }
                }

                // Establecer el texto en el JTextArea
                informacion.setText(productosInfo.toString());
            } catch (SQLException e) {
                informacion.setText("Error al realizar la consulta: " + e.getMessage());
                e.printStackTrace();
            }
        } catch (SQLException e) {
            informacion.setText("Error al conectar con la base de datos: " + e.getMessage());
            e.printStackTrace();
        }
    }
    
    private void mostrarHistorial() {
    try (Connection connection = Conexion.getConnection()) { // Usamos tu clase Conexion para la conexión
        if (connection == null) {
            informacion.setText("Error: No se pudo conectar a la base de datos.");
            return;
        }

        // Consulta SQL para obtener el historial de compras
        String query = """
            SELECT hc.id_compra, 
                   u.nombre AS usuario, 
                   p.nombre AS producto, 
                   hc.cantidad, 
                   hc.fecha
            FROM historial_compras hc
            JOIN usuarios u ON hc.id_usuario = u.id_usuario
            JOIN productos p ON hc.id_producto = p.id_producto
        """;

        try (Statement statement = connection.createStatement(); ResultSet resultSet = statement.executeQuery(query)) {
            StringBuilder historialInfo = new StringBuilder();

            // Verificar si no hay datos en el historial
            if (!resultSet.isBeforeFirst()) {
                historialInfo.append("No se encontraron registros de compras.\n");
            } else {
                // Cabecera de la tabla
                historialInfo.append(String.format("     %-10s \t %-20s \t %-20s \t %-10s \t %-15s\n", 
                    "ID Compra", "Usuario", "Producto", "Cantidad", "Fecha"));
                historialInfo.append("-----------------------------------------------------------------------------------------------------\n");

                while (resultSet.next()) {
                    // Obtener los datos de cada compra
                    int idCompra = resultSet.getInt("id_compra");
                    String usuario = resultSet.getString("usuario");
                    String producto = resultSet.getString("producto");
                    int cantidad = resultSet.getInt("cantidad");
                    String fecha = resultSet.getString("fecha");

                    // Construir la información del historial
                    historialInfo.append(String.format("     %-10d \t %-20s \t %-20s \t %-10d \t %-15s\n", 
                        idCompra, usuario, producto, cantidad, fecha));
                }
            }

            // Establecer el texto en el JTextArea
            informacion.setText(historialInfo.toString());
        } catch (SQLException e) {
            informacion.setText("Error al realizar la consulta: " + e.getMessage());
            e.printStackTrace();
        }
    } catch (SQLException e) {
        informacion.setText("Error al conectar con la base de datos: " + e.getMessage());
        e.printStackTrace();
    }
}


}
